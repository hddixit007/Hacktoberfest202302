#include <iostream>
#include <vector>

// Partition the array into two segments and return the index of the pivot element
int partition(std::vector<int>& arr, int low, int high) {
    int pivot = arr[high]; // Choose the last element as the pivot
    int i = (low - 1); // Index of smaller element

    for (int j = low; j < high; j++) {
        // If the current element is smaller than or equal to the pivot
        if (arr[j] <= pivot) {
            i++; // Increment index of smaller element
            std::swap(arr[i], arr[j]);
        }
    }

    std::swap(arr[i + 1], arr[high]);
    return (i + 1);
}

// Recursive function to sort an array using quick sort
void quickSort(std::vector<int>& arr, int low, int high) {
    if (low < high) {
        int pivotIndex = partition(arr, low, high);

        // Recursively sort elements before and after the partition
        quickSort(arr, low, pivotIndex - 1);
        quickSort(arr, pivotIndex + 1, high);
    }
}

int main() {
    std::vector<int> arr = {12, 11, 13, 5, 6, 7};

    int n = arr.size();

    std::cout << "Original array: ";
    for (int i : arr)
        std::cout << i << " ";
    std::cout << std::endl;

    quickSort(arr, 0, n - 1);

    std::cout << "Sorted array: ";
    for (int i : arr)
        std::cout << i << " ";
    std::cout << std::endl;

    return 0;
}


//Choose a Pivot: Select a pivot element from the array. Common choices include the first, last, or middle element, but other strategies are possible.
//Partitioning: Rearrange the elements in the array so that all elements less than the pivot come before it, and all elements greater than the pivot come after it. The pivot element is now in its final sorted position.
//Recursion: Recursively apply the Quick Sort algorithm to the two subarrays created by the partition step. One subarray contains elements less than the pivot, and the other contains elements greater than the pivot.
//Base Case: The recursion stops when the subarrays have only one or zero elements. In this case, they are considered sorted.
//Combine: As the recursion unfolds, the sorted subarrays are combined, resulting in a fully sorted array.
//Quick Sort is efficient due to its in-place partitioning and typically has good average-case performance. The choice of the pivot and the partitioning method can affect its efficiency, but it's generally one of the fastest sorting algorithms.





